import Binary from '../Binary';
type DataEntryType = 'integer' | 'boolean' | 'binary' | 'string';
type DataEntryValue = number | boolean | Binary | string;
type DataEntryValueIn = number | boolean | Uint8Array | string;
export default class DataEntry {
    key: string;
    type: DataEntryType;
    value: DataEntryValue;
    constructor(key: string, type: DataEntryType, value: DataEntryValueIn);
    toBinary(): Uint8Array;
    private valueToBinary;
    toJSON(): {
        key: string;
        type: string;
        value: DataEntryValue;
    };
    static from(data: {
        key: string;
        type: DataEntryType;
        value: DataEntryValue;
    }): DataEntry;
    static guess(key: string, value: any): DataEntry;
    protected static guard(key: string, type: DataEntryType, value: DataEntryValueIn): DataEntryValue;
}
export declare function dictToData(dictionary: Record<string, number | boolean | string | Uint8Array>): DataEntry[];
export {};
