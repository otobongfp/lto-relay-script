import { Account } from '../accounts';
import { Statement } from '../transactions';
import Transaction from '../transactions/Transaction';
import { IDIDService, TDIDRelationship } from '../types';
export default class IdentityBuilder {
    readonly account: Account;
    readonly newMethods: {
        account: Account;
        relationship: TDIDRelationship[];
        expires?: Date;
    }[];
    readonly removedMethods: string[];
    readonly newDisableCapability: {
        address: string;
        expires?: Date;
        revokeDelay: number;
    }[];
    readonly removedDisableCapability: string[];
    readonly newServices: IDIDService[];
    readonly removedServices: string[];
    constructor(account: Account);
    private accountAddress;
    addVerificationMethod(account: Account, relationship?: TDIDRelationship | TDIDRelationship[], expires?: Date | number): this;
    removeVerificationMethod(account: Account | string): this;
    grantDisableCapability(account: Account | string, expires?: Date | number, revokeDelay?: number): this;
    revokeDisableCapability(account: Account | string): this;
    addService(service: IDIDService): this;
    removeService(service: string | Pick<IDIDService, 'id' | 'type'>): this;
    get transactions(): Transaction[];
    build(): Transaction[];
    private getMethodTxs;
    private getDisableCapabilityTxs;
    private getServiceTxs;
    deactivate(reason?: string): Statement;
}
