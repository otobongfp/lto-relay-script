import { IBinary, IMessageJSON, TKeyType } from '../types';
import Binary from '../Binary';
import { Account } from '../accounts';
export default class Message {
    /** Type of the message */
    type: string;
    /** Meta type of the data */
    mediaType: string;
    /** Data of the message */
    data: IBinary;
    /** Time when the message was signed */
    timestamp?: Date;
    /** Key and its type used to sign the event */
    sender?: {
        keyType: TKeyType;
        publicKey: IBinary;
    };
    /** Signature of the message */
    signature?: IBinary;
    /** Address of the recipient */
    recipient?: string;
    /** Hash (see dynamic property) */
    private _hash?;
    /** Encrypted data */
    private _encryptedData?;
    constructor(data: any, mediaType?: string, type?: string);
    get hash(): Binary;
    get encryptedData(): Binary;
    to(recipient: string | Account): Message;
    encryptFor(recipient: Account): Message;
    decryptWith(account: Account): Message;
    isEncrypted(): boolean;
    signWith(sender: Account): Message;
    isSigned(): boolean;
    verifySignature(): boolean;
    verifyHash(): boolean;
    toBinary(withSignature?: boolean): Uint8Array;
    toJSON(): IMessageJSON;
    static from(data: IMessageJSON | Uint8Array): Message;
    private static fromJSON;
    private static fromBinary;
}
