"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert = __importStar(require("../utils/convert"));
const EventChain_1 = require("./EventChain");
const Binary_1 = __importDefault(require("../Binary"));
const utils_1 = require("@noble/hashes/utils");
const crypto_1 = require("../utils/crypto");
const accounts_1 = require("../accounts");
class Event {
    constructor(data, mediaType, previous) {
        this.version = EventChain_1.EVENT_CHAIN_V2;
        /** Hash of attachments related to the event */
        this.attachments = [];
        this._setData(data, mediaType);
        if (previous)
            this.previous = typeof previous == 'string' ? Binary_1.default.fromBase58(previous) : new Binary_1.default(previous);
    }
    addAttachment(name, data, mediaType) {
        this.attachments.push(this._setData(data, mediaType, { name }));
    }
    _setData(data, mediaType, target = this) {
        if (data instanceof Uint8Array) {
            target.mediaType = mediaType ?? 'application/octet-stream';
            target.data = data instanceof Binary_1.default ? data : new Binary_1.default(data);
        }
        else {
            if (mediaType && mediaType !== 'application/json')
                throw new Error(`Unable to encode data as ${mediaType}`);
            target.mediaType = mediaType ?? 'application/json';
            target.data = new Binary_1.default(JSON.stringify(data));
        }
        return target;
    }
    get hash() {
        return this._hash ?? new Binary_1.default(this.toBinary()).hash();
    }
    toBinary() {
        if (typeof this.data == 'undefined')
            throw new Error('Event cannot be converted to binary: data unknown');
        if (!this.signKey)
            throw new Error('Event cannot be converted to binary: sign key not set');
        if (!this.previous)
            throw new Error('Event cannot be converted to binary: event is not part of an event chain');
        switch (this.version) {
            case EventChain_1.EVENT_CHAIN_V1:
                return this.toBinaryV1();
            case EventChain_1.EVENT_CHAIN_V2:
                return this.toBinaryV2();
            default:
                throw new Error(`Event cannot be converted to binary: version ${this.version} not supported`);
        }
    }
    toBinaryV1() {
        return (0, utils_1.concatBytes)(this.previous, Uint8Array.from([(0, crypto_1.keyTypeId)(this.signKey.keyType)]), this.signKey.publicKey, convert.longToByteArray(this.timestamp), convert.stringToByteArray(this.mediaType), this.data);
    }
    toBinaryV2() {
        return (0, utils_1.concatBytes)(this.previous, Uint8Array.from([(0, crypto_1.keyTypeId)(this.signKey.keyType)]), this.signKey.publicKey, convert.longToByteArray(this.timestamp), convert.stringToByteArrayWithSize(this.mediaType), convert.bytesToByteArrayWithSize(this.data), convert.shortToByteArray(this.attachments.length), ...this.attachments.map((a) => {
            return (0, utils_1.concatBytes)(convert.stringToByteArrayWithSize(a.name), convert.stringToByteArrayWithSize(a.mediaType), convert.bytesToByteArrayWithSize(a.data));
        }));
    }
    verifySignature() {
        if (!this.signature || !this.signKey)
            throw new Error(`Event ${this._hash?.base58} is not signed`);
        return (0, accounts_1.cypher)(this.signKey).verifySignature(this.toBinary(), this.signature);
    }
    verifyHash() {
        return !this._hash || this._hash.hex === new Binary_1.default(this.toBinary()).hash().hex;
    }
    signWith(account) {
        if (!this.timestamp)
            this.timestamp = Date.now();
        try {
            this.signKey = {
                keyType: account.keyType,
                publicKey: Binary_1.default.fromBase58(account.publicKey),
            };
            const binary = this.toBinary();
            this.signature = account.sign(binary);
            this._hash = new Binary_1.default(binary).hash();
        }
        catch (e) {
            throw new Error(`Failed to sign event. ${e.message || e}`);
        }
        return this;
    }
    addTo(chain) {
        chain.add(this);
        return this;
    }
    isSigned() {
        return !!this.signature;
    }
    get parsedData() {
        if (!this.mediaType.startsWith('application/json'))
            throw new Error(`Unable to parse data with media type "${this.mediaType}"`);
        return JSON.parse(this.data.toString());
    }
    toJSON() {
        return {
            timestamp: this.timestamp,
            previous: this.previous?.base58,
            signKey: this.signKey ? { keyType: this.signKey.keyType, publicKey: this.signKey.publicKey.base58 } : undefined,
            signature: this.signature?.base58,
            hash: this.signKey ? this.hash.base58 : undefined,
            mediaType: this.mediaType,
            data: 'base64:' + this.data.base64,
            attachments: this.attachments.map((attachment) => ({
                name: attachment.name,
                mediaType: attachment.mediaType,
                data: 'base64:' + attachment.data.base64,
            })),
        };
    }
    static from(data, version = 2) {
        const event = Object.create(this.prototype);
        event.version = version;
        try {
            event.timestamp = data.timestamp;
            if (data.previous)
                event.previous = Binary_1.default.fromBase58(data.previous);
            if (data.signKey) {
                event.signKey = {
                    publicKey: Binary_1.default.fromBase58(data.signKey.publicKey),
                    keyType: data.signKey.keyType,
                };
            }
            if (data.signature)
                event.signature = Binary_1.default.fromBase58(data.signature);
            if (data.hash)
                event._hash = Binary_1.default.fromBase58(data.hash);
            event.mediaType = data.mediaType;
            event.data =
                typeof data.data === 'string' && data.data.startsWith('base64:')
                    ? Binary_1.default.fromBase64(data.data.slice(7))
                    : new Binary_1.default(data.data);
            event.attachments = (data.attachments ?? []).map((attachment) => ({
                name: attachment.name,
                mediaType: attachment.mediaType,
                data: typeof attachment.data === 'string' && attachment.data.startsWith('base64:')
                    ? Binary_1.default.fromBase64(attachment.data.slice(7))
                    : new Binary_1.default(attachment.data),
            }));
        }
        catch (e) {
            throw new Error(`Unable to create event from JSON data: ${e.message || e}`);
        }
        return event;
    }
}
exports.default = Event;
//# sourceMappingURL=Event.js.map