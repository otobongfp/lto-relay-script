"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cosmosAddress = exports.solanaAddress = exports.ethereumAddress = void 0;
const sha3_1 = require("@noble/hashes/sha3");
const sha256_1 = require("@noble/hashes/sha256");
const base_1 = require("@scure/base");
const ripemd160_1 = require("@noble/hashes/ripemd160");
const bech32_1 = require("bech32");
const ecdsa_1 = require("./ecdsa");
const utils_1 = require("@noble/hashes/utils");
function ethereumAddress(publicKey, chainId) {
    publicKey = (0, ecdsa_1.decompressPublicKey)(publicKey).slice(1);
    const rawAddress = (0, sha3_1.keccak_256)(publicKey).slice(-20);
    const address = (0, utils_1.bytesToHex)(rawAddress);
    if (typeof chainId === 'string')
        chainId = parseInt(chainId);
    const prefix = chainId ? `0x${chainId.toString(16)}00` : '0x';
    return prefix + address;
}
exports.ethereumAddress = ethereumAddress;
function solanaPrefixByte(network) {
    switch (network) {
        case undefined:
        case 'mainnet-beta':
        case '5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp':
            return 0x01;
        case 'testnet':
        case '4uhcVJyU9pJkvQyS88uRDiswHXSCkY3z':
            return 0x02;
        case 'devnet':
        case 'EtWTRABZaYq6iMfeYKouRu166VU2xqa1':
            return 0x03;
        default:
            throw new Error(`Unknown Solana network: ${network}`);
    }
}
function solanaAddress(publicKey, network) {
    const prefixByte = solanaPrefixByte(network);
    const buffer = new Uint8Array([prefixByte, ...publicKey]);
    const hash = (0, sha256_1.sha256)(buffer);
    const addressBytes = hash.slice(0, 20);
    return base_1.base64.encode(new Uint8Array([prefixByte, ...addressBytes]));
}
exports.solanaAddress = solanaAddress;
function cosmosAddress(publicKey) {
    const hash = (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(new Uint8Array(publicKey)));
    return bech32_1.bech32.encode('cosmos', bech32_1.bech32.toWords(hash));
}
exports.cosmosAddress = cosmosAddress;
//# sourceMappingURL=external-address.js.map