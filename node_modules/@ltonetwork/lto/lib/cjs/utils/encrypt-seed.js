"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptSeed = exports.encryptSeed = void 0;
const AES = __importStar(require("crypto-js/aes.js"));
const sha256_1 = require("@noble/hashes/sha256");
const utils_1 = require("@noble/hashes/utils");
const constants_1 = require("../constants");
function strengthenPassword(password, rounds = constants_1.SEED_ENCRYPTION_ROUNDS) {
    while (rounds--)
        password = (0, utils_1.bytesToHex)((0, sha256_1.sha256)(password));
    return password;
}
function encryptSeed(seed, password, encryptionRounds) {
    if (!seed || typeof seed !== 'string')
        throw new Error('Seed is required');
    if (!password || typeof password !== 'string')
        throw new Error('Password is required');
    password = strengthenPassword(password, encryptionRounds);
    return AES.encrypt(seed, password).toString();
}
exports.encryptSeed = encryptSeed;
function decryptSeed(encryptedSeed, password, encryptionRounds) {
    if (!encryptedSeed || typeof encryptedSeed !== 'string')
        throw new Error('Encrypted seed is required');
    if (!password || typeof password !== 'string')
        throw new Error('Password is required');
    password = strengthenPassword(password, encryptionRounds);
    const hexSeed = AES.decrypt(encryptedSeed, password);
    return new TextDecoder().decode((0, utils_1.hexToBytes)(hexSeed.toString()));
}
exports.decryptSeed = decryptSeed;
//# sourceMappingURL=encrypt-seed.js.map