"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Transaction_1 = __importDefault(require("./Transaction"));
const utils_1 = require("@noble/hashes/utils");
const base_1 = require("@scure/base");
const convert = __importStar(require("../utils/convert"));
const crypto_1 = require("../utils/crypto");
const Binary_1 = __importDefault(require("../Binary"));
const BASE_FEE = 100000000;
const VAR_FEE = 10000000;
const DEFAULT_VERSION = 3;
class MassTransfer extends Transaction_1.default {
    constructor(transfers, attachment = '') {
        super(MassTransfer.TYPE, DEFAULT_VERSION, BASE_FEE + transfers.length * VAR_FEE);
        this.transfers = transfers;
        this.attachment = new Binary_1.default(attachment);
    }
    transferBinary() {
        return this.transfers.reduce((binary, transfer) => (0, utils_1.concatBytes)(binary, base_1.base58.decode(transfer.recipient), convert.longToByteArray(transfer.amount)), new Uint8Array());
    }
    toBinaryV1() {
        return (0, utils_1.concatBytes)(Uint8Array.from([this.type, this.version]), base_1.base58.decode(this.senderPublicKey), convert.shortToByteArray(this.transfers.length), this.transferBinary(), convert.longToByteArray(this.timestamp), convert.longToByteArray(this.fee), convert.shortToByteArray(this.attachment.length), this.attachment);
    }
    toBinaryV3() {
        return (0, utils_1.concatBytes)(Uint8Array.from([this.type, this.version]), convert.stringToByteArray(this.networkId), convert.longToByteArray(this.timestamp), Uint8Array.from([(0, crypto_1.keyTypeId)(this.senderKeyType)]), base_1.base58.decode(this.senderPublicKey), convert.longToByteArray(this.fee), convert.shortToByteArray(this.transfers.length), this.transferBinary(), convert.shortToByteArray(this.attachment.length), this.attachment);
    }
    toBinary() {
        if (!this.sender)
            throw Error('Transaction sender not set');
        switch (this.version) {
            case 1:
                return this.toBinaryV1();
            case 3:
                return this.toBinaryV3();
            default:
                throw Error('Incorrect version');
        }
    }
    toJSON() {
        return {
            id: this.id,
            type: this.type,
            version: this.version,
            sender: this.sender,
            senderKeyType: this.senderKeyType,
            senderPublicKey: this.senderPublicKey,
            sponsor: this.sponsor,
            sponsorKeyType: this.sponsorKeyType,
            sponsorPublicKey: this.sponsorPublicKey,
            fee: this.fee,
            timestamp: this.timestamp,
            transfers: this.transfers,
            attachment: this.attachment.base58,
            proofs: this.proofs,
            height: this.height,
        };
    }
    static from(data) {
        const attachment = data.attachment ? Binary_1.default.fromBase58(data.attachment) : '';
        return new MassTransfer(data.transfers, attachment).initFrom(data);
    }
}
MassTransfer.TYPE = 11;
exports.default = MassTransfer;
//# sourceMappingURL=MassTransfer.js.map