"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const accounts_1 = require("../accounts");
const transactions_1 = require("../transactions");
const constants_1 = require("../constants");
const case_1 = require("../utils/case");
class IdentityBuilder {
    constructor(account) {
        this.newMethods = [];
        this.removedMethods = [];
        this.newDisableCapability = [];
        this.removedDisableCapability = [];
        this.newServices = [];
        this.removedServices = [];
        this.account = account;
    }
    accountAddress(account) {
        return account instanceof accounts_1.Account ? account.address : account.replace(/^did:lto:|#.*$/g, '');
    }
    addVerificationMethod(account, relationship, expires) {
        relationship ?? (relationship = []);
        if (typeof relationship === 'string')
            relationship = [relationship];
        if (typeof expires === 'number')
            expires = new Date(expires);
        this.newMethods.push({ account: account, relationship, expires });
        return this;
    }
    removeVerificationMethod(account) {
        this.removedMethods.push(this.accountAddress(account));
        return this;
    }
    grantDisableCapability(account, expires, revokeDelay = 0) {
        this.newDisableCapability.push({
            address: this.accountAddress(account),
            expires: typeof expires === 'number' ? new Date(expires) : expires,
            revokeDelay,
        });
        return this;
    }
    revokeDisableCapability(account) {
        this.removedDisableCapability.push(this.accountAddress(account));
        return this;
    }
    addService(service) {
        this.newServices.push(service);
        return this;
    }
    removeService(service) {
        const id = typeof service === 'string' ? service : service.id || (0, case_1.kababCase)(service.type);
        const key = id.replace(new RegExp(`^${this.account.did}#|^#`), '');
        this.removedServices.push(key);
        return this;
    }
    get transactions() {
        return this.build();
    }
    build() {
        const txs = [...this.getMethodTxs(), ...this.getDisableCapabilityTxs(), ...this.getServiceTxs()];
        if (txs.length === 0) {
            txs.push(new transactions_1.Anchor().signWith(this.account));
        }
        return txs;
    }
    getMethodTxs() {
        const txs = [];
        const accounts = this.newMethods
            .map((method) => method.account)
            .filter((account) => account.address !== this.account.address);
        if (accounts.length > 0)
            txs.push(new transactions_1.Register(...accounts).signWith(this.account));
        for (const method of this.newMethods) {
            const tx = new transactions_1.Association(constants_1.ASSOCIATION_TYPE_DID_VERIFICATION_METHOD, method.account.address, undefined, method.expires, Object.fromEntries(method.relationship.map((rel) => [rel, true])));
            txs.push(tx.signWith(this.account));
        }
        for (const address of this.removedMethods) {
            const tx = new transactions_1.RevokeAssociation(constants_1.ASSOCIATION_TYPE_DID_VERIFICATION_METHOD, address);
            txs.push(tx.signWith(this.account));
        }
        return txs;
    }
    getDisableCapabilityTxs() {
        const txs = [];
        for (const disable of this.newDisableCapability) {
            const tx = new transactions_1.Association(constants_1.ASSOCIATION_TYPE_DID_DISABLE_CAPABILITY, disable.address, undefined, disable.expires, disable.revokeDelay > 0 ? { revokeDelay: disable.revokeDelay } : {});
            txs.push(tx.signWith(this.account));
        }
        for (const address of this.removedDisableCapability) {
            const tx = new transactions_1.RevokeAssociation(constants_1.ASSOCIATION_TYPE_DID_DISABLE_CAPABILITY, address);
            txs.push(tx.signWith(this.account));
        }
        return txs;
    }
    getServiceTxs() {
        if (this.newServices.length === 0 && this.removedServices.length === 0)
            return [];
        const entries = this.newServices.map((service) => {
            const id = service.id || (0, case_1.kababCase)(service.type);
            const key = id.replace(new RegExp(`^${this.account.did}#|^#`), '');
            return [`did:service:${key}`, JSON.stringify(service)];
        });
        const removeEntries = this.removedServices.map((key) => {
            return [`did:service:${key}`, false]; // It's not possible to delete a data entry, so we set it to false
        });
        const tx = new transactions_1.Data(Object.fromEntries([...entries, ...removeEntries])).signWith(this.account);
        return [tx];
    }
    deactivate(reason) {
        const data = reason ? { reason } : {};
        return new transactions_1.Statement(constants_1.STATEMENT_TYPE_DEACTIVATE_DID, undefined, undefined, data).signWith(this.account);
    }
}
exports.default = IdentityBuilder;
//# sourceMappingURL=IdentityBuilder.js.map