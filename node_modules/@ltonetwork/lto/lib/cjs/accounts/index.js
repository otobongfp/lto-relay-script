"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setCypherFactory = exports.cypher = exports.AccountFactoryED25519 = exports.AccountFactoryECDSA = exports.AccountFactory = exports.Account = void 0;
const ED25519_1 = require("./ed25519/ED25519");
const ECDSA_1 = require("./ecdsa/ECDSA");
var Account_1 = require("./Account");
Object.defineProperty(exports, "Account", { enumerable: true, get: function () { return __importDefault(Account_1).default; } });
var AccountFactory_1 = require("./AccountFactory");
Object.defineProperty(exports, "AccountFactory", { enumerable: true, get: function () { return __importDefault(AccountFactory_1).default; } });
var AccountFactoryECDSA_1 = require("./ecdsa/AccountFactoryECDSA");
Object.defineProperty(exports, "AccountFactoryECDSA", { enumerable: true, get: function () { return __importDefault(AccountFactoryECDSA_1).default; } });
var AccountFactoryED25519_1 = require("./ed25519/AccountFactoryED25519");
Object.defineProperty(exports, "AccountFactoryED25519", { enumerable: true, get: function () { return __importDefault(AccountFactoryED25519_1).default; } });
function _cypher(account) {
    switch (account.keyType) {
        case 'ed25519':
            return new ED25519_1.ED25519({ publicKey: account.publicKey });
        case 'secp256k1':
            return new ECDSA_1.ECDSA('secp256k1', { publicKey: account.publicKey });
        case 'secp256r1':
            return new ECDSA_1.ECDSA('secp256r1', { publicKey: account.publicKey });
        default:
            throw Error(`Unsupported key type ${account.publicKey}`);
    }
}
exports.cypher = _cypher;
function setCypherFactory(factory) {
    exports.cypher = factory;
}
exports.setCypherFactory = setCypherFactory;
//# sourceMappingURL=index.js.map