import * as AES from 'crypto-js/aes.js';
import { sha256 } from '@noble/hashes/sha256';
import { bytesToHex, hexToBytes } from '@noble/hashes/utils';
import { SEED_ENCRYPTION_ROUNDS } from '../constants.js';
function strengthenPassword(password, rounds = SEED_ENCRYPTION_ROUNDS) {
    while (rounds--)
        password = bytesToHex(sha256(password));
    return password;
}
export function encryptSeed(seed, password, encryptionRounds) {
    if (!seed || typeof seed !== 'string')
        throw new Error('Seed is required');
    if (!password || typeof password !== 'string')
        throw new Error('Password is required');
    password = strengthenPassword(password, encryptionRounds);
    return AES.encrypt(seed, password).toString();
}
export function decryptSeed(encryptedSeed, password, encryptionRounds) {
    if (!encryptedSeed || typeof encryptedSeed !== 'string')
        throw new Error('Encrypted seed is required');
    if (!password || typeof password !== 'string')
        throw new Error('Password is required');
    password = strengthenPassword(password, encryptionRounds);
    const hexSeed = AES.decrypt(encryptedSeed, password);
    return new TextDecoder().decode(hexToBytes(hexSeed.toString()));
}
//# sourceMappingURL=encrypt-seed.js.map