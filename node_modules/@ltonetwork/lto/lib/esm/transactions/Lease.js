import Transaction from './Transaction.js';
import { concatBytes } from '@noble/hashes/utils';
import { base58 } from '@scure/base';
import * as convert from '../utils/convert.js';
import { keyTypeId } from '../utils/crypto.js';
const DEFAULT_FEE = 100000000;
const DEFAULT_VERSION = 3;
class Lease extends Transaction {
    constructor(recipient, amount) {
        super(Lease.TYPE, DEFAULT_VERSION, DEFAULT_FEE);
        this.recipient = typeof recipient === 'string' ? recipient : recipient.address;
        this.amount = amount;
    }
    toBinaryV2() {
        return concatBytes(Uint8Array.from([this.type, this.version, 0]), base58.decode(this.senderPublicKey), base58.decode(this.recipient), convert.longToByteArray(this.amount), convert.longToByteArray(this.fee), convert.longToByteArray(this.timestamp));
    }
    toBinaryV3() {
        return concatBytes(Uint8Array.from([this.type, this.version]), convert.stringToByteArray(this.networkId), convert.longToByteArray(this.timestamp), Uint8Array.from([keyTypeId(this.senderKeyType)]), base58.decode(this.senderPublicKey), convert.longToByteArray(this.fee), base58.decode(this.recipient), convert.longToByteArray(this.amount));
    }
    toBinary() {
        if (!this.sender)
            throw Error('Transaction sender not set');
        switch (this.version) {
            case 2:
                return this.toBinaryV2();
            case 3:
                return this.toBinaryV3();
            default:
                throw new Error('Incorrect version');
        }
    }
    toJSON() {
        return {
            id: this.id,
            type: this.type,
            version: this.version,
            sender: this.sender,
            senderKeyType: this.senderKeyType,
            senderPublicKey: this.senderPublicKey,
            sponsor: this.sponsor,
            sponsorKeyType: this.sponsorKeyType,
            sponsorPublicKey: this.sponsorPublicKey,
            fee: this.fee,
            timestamp: this.timestamp,
            recipient: this.recipient,
            amount: this.amount,
            proofs: this.proofs,
            height: this.height,
        };
    }
    static from(data) {
        return new Lease(data.recipient, data.amount).initFrom(data);
    }
}
Lease.TYPE = 8;
export default Lease;
//# sourceMappingURL=Lease.js.map