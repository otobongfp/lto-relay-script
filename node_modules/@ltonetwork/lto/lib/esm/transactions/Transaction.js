import { base58 } from '@scure/base';
import { getNetwork } from '../utils/index.js';
export default class Transaction {
    constructor(type, version, fee = 0) {
        this.proofs = [];
        this.senderKeyType = 'ed25519';
        this.type = type;
        this.version = version;
        this.fee = fee;
    }
    isSigned() {
        return this.proofs.length != 0;
    }
    signWith(account) {
        if (!this.timestamp)
            this.timestamp = Date.now();
        if (!this.sender) {
            this.sender = account.address;
            this.senderKeyType = account.keyType;
            this.senderPublicKey = account.publicKey;
        }
        const signature = account.sign(this.toBinary()).base58;
        if (!this.proofs.includes(signature))
            this.proofs.push(signature);
        if (typeof account.parent !== 'undefined' && !this.sponsor) {
            this.sponsorWith(account.parent);
        }
        return this;
    }
    get networkId() {
        if (!this.sender)
            throw new Error('Network id unknown');
        return getNetwork(this.sender);
    }
    broadcastTo(node) {
        if (this.isSigned()) {
            return node.broadcast(this);
        }
        if (node.apiKey === '')
            throw new Error('Node API key required to broadcast unsigned transactions');
        return node.submit(this);
    }
    sponsorWith(sponsorAccount) {
        if (!this.isSigned())
            throw new Error('Transaction must be signed first');
        if (this.sponsor)
            this.proofs.pop(); // The sponsor is replaced. The last proof is from the old sponsor.
        const signature = sponsorAccount.sign(this.toBinary());
        this.sponsor = sponsorAccount.address;
        this.sponsorPublicKey = sponsorAccount.publicKey;
        this.sponsorKeyType = sponsorAccount.keyType;
        this.proofs.push(base58.encode(signature));
        return this;
    }
    initFrom(data) {
        this.version = data.version;
        this.id = data.id;
        this.timestamp = data.timestamp;
        this.fee = data.fee;
        this.sender = data.sender;
        this.senderKeyType = data.senderKeyType ?? 'ed25519';
        this.senderPublicKey = data.senderPublicKey;
        if (data.sponsor) {
            this.sponsor = data.sponsor;
            this.sponsorKeyType = data.sponsorKeyType ?? 'ed25519';
            this.sponsorPublicKey = data.sponsorPublicKey;
        }
        this.proofs = data.proofs ?? [];
        this.height = data.height;
        return this;
    }
}
//# sourceMappingURL=Transaction.js.map