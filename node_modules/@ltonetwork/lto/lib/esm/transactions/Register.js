import Transaction from './Transaction.js';
import { concatBytes } from '@noble/hashes/utils';
import { base58 } from '@scure/base';
import * as convert from '../utils/convert.js';
import { keyTypeId } from '../utils/crypto.js';
const BASE_FEE = 25000000;
const VAR_FEE = 10000000;
const DEFAULT_VERSION = 3;
class Register extends Transaction {
    constructor(...accounts) {
        super(Register.TYPE, DEFAULT_VERSION, BASE_FEE + accounts.length * VAR_FEE);
        this.accounts = accounts.map(this.accountToDict);
        if (this.accounts.length > 100)
            throw new Error('Too many accounts');
    }
    accountToDict(account) {
        return { keyType: account.keyType, publicKey: account.publicKey };
    }
    accountsToBinary() {
        return this.accounts.reduce((binary, account) => concatBytes(binary, Uint8Array.from([keyTypeId(account.keyType)]), base58.decode(account.publicKey)), new Uint8Array());
    }
    toBinaryV3() {
        return concatBytes(Uint8Array.from([this.type, this.version]), convert.stringToByteArray(this.networkId), convert.longToByteArray(this.timestamp), Uint8Array.from([keyTypeId(this.senderKeyType)]), base58.decode(this.senderPublicKey), convert.longToByteArray(this.fee), convert.shortToByteArray(this.accounts.length), this.accountsToBinary());
    }
    toBinary() {
        if (!this.sender)
            throw Error('Transaction sender not set');
        switch (this.version) {
            case 3:
                return this.toBinaryV3();
            default:
                throw new Error('Incorrect version');
        }
    }
    toJSON() {
        return {
            id: this.id,
            type: this.type,
            version: this.version,
            sender: this.sender,
            senderKeyType: this.senderKeyType,
            senderPublicKey: this.senderPublicKey,
            sponsor: this.sponsor,
            sponsorKeyType: this.sponsorKeyType,
            sponsorPublicKey: this.sponsorPublicKey,
            fee: this.fee,
            timestamp: this.timestamp,
            accounts: this.accounts,
            proofs: this.proofs,
            height: this.height,
        };
    }
    static from(data) {
        return new Register(...data.accounts).initFrom(data);
    }
}
Register.TYPE = 20;
export default Register;
//# sourceMappingURL=Register.js.map