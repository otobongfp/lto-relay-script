import { bytesToByteArrayWithSize, longToByteArray, stringToByteArrayWithSize } from '../utils/convert.js';
import { concatBytes } from '@noble/hashes/utils';
import Binary from '../Binary.js';
export default class DataEntry {
    constructor(key, type, value) {
        this.key = key;
        this.type = type;
        this.value = DataEntry.guard(key, type, value);
    }
    toBinary() {
        return concatBytes(stringToByteArrayWithSize(this.key), this.valueToBinary());
    }
    valueToBinary() {
        switch (this.type) {
            case 'integer':
                return concatBytes(Uint8Array.from([0]), longToByteArray(this.value));
            case 'boolean':
                return concatBytes(Uint8Array.from([1]), Uint8Array.from([+this.value]));
            case 'binary':
                return concatBytes(Uint8Array.from([2]), bytesToByteArrayWithSize(this.value));
            case 'string':
                return concatBytes(Uint8Array.from([3]), stringToByteArrayWithSize(this.value));
        }
    }
    toJSON() {
        return {
            key: this.key,
            type: this.type,
            value: this.value instanceof Binary ? 'base64:' + this.value.base64 : this.value,
        };
    }
    static from(data) {
        const value = data.type === 'binary' && typeof data.value === 'string' && data.value.startsWith('base64:')
            ? Binary.fromBase64(data.value.slice(7))
            : data.value;
        return new DataEntry(data.key, data.type, value);
    }
    static guess(key, value) {
        if (typeof value === 'number')
            return new DataEntry(key, 'integer', value);
        if (typeof value === 'boolean')
            return new DataEntry(key, 'boolean', value);
        if (typeof value === 'string')
            return new DataEntry(key, 'string', value);
        if (value instanceof Uint8Array)
            return new DataEntry(key, 'binary', value);
        throw Error('Type not recognized');
    }
    static guard(key, type, value) {
        switch (type) {
            case 'integer':
                if (typeof value !== 'number')
                    throw Error(`Invalid value for data entry '${key}' of type ${type}`);
                return value;
            case 'boolean':
                if (typeof value !== 'boolean')
                    throw Error(`Invalid value for data entry '${key}' of type ${type}`);
                return value;
            case 'binary':
                if (!(value instanceof Uint8Array))
                    throw Error(`Invalid value for data entry '${key}' of type ${type}`);
                return new Binary(value);
            case 'string':
                if (typeof value !== 'string')
                    throw Error(`Invalid value for data entry '${key}' of type ${type}`);
                return value;
            default:
                throw Error(`Unsupported data entry type ${type}`);
        }
    }
}
export function dictToData(dictionary) {
    const data = [];
    for (const key in dictionary) {
        data.push(DataEntry.guess(key, dictionary[key]));
    }
    return data;
}
//# sourceMappingURL=DataEntry.js.map